--decimal(5,2)  111.11 一共五位，小数点后是两位   rm-rf
create database qq charset=utf8;
use qq;
create table student(
	id int(11) primary key auto_increment not null,
	name varchar(20) not null,
	gender bit(1) default 0 not null,
	address varchar(64),
	age int(11) not null,
	isDelete bit(1) default 0 not null
);
insert into student(name,address,age) values('tom','',19);
insert into student(name,address,age) values('lilei','北京',20);
insert into student(name,address,age) values('韩梅梅','上海',17);
insert into student(name,address,age) values('tom','',19);
insert into student(name,address,age) values('lilei','北京',20);
insert into student(name,address,age) values('韩梅梅','上海',17);
insert into student(name,address,age) values('tom','',19);
insert into student(name,address,age) values('lilei','北京',20);
insert into student(name,address,age) values('韩梅梅','上海',17);
select * from student;

Mysql中的bit类型
利用它可定义一个位变量，但不能定义位指针，也不能定义位数组。它的值是一个二进制位，不是0就是1，类似Boolean类型中的True和False。

值域
char为8位一个字节的数据类型,取值范围为 -128到+127。而bit只有1位，只能表示0和1两种值。通常bit定义的变量作为一个标志位用。

类型定义
例如一个数据为25，那么它就可以定义为char型、int型等。因为他们都在自己的值域内。同样一个在自己值域的数0和1就可以定义为bit型

插入
插入数据时，插入true,false，数据库会相应的转换成1，0。

更新
更新最常用的办法肯定是先查询判断再进行更新,这样就需要先查询一次,再执行更新.
如果不想进行查询，直接对它进行更新，每次得到更新前的相反值的话，可以使用一下方法：
1、substr函数
update anketo1 set fb = substring(‘10’,fb+1,1) WHERE id =5
2、直接取反
update anketo1 set fb = ~ fb WHERE id =5
3、用ABS取绝对值
update anketo1 set fb = abs(fb-1)

查询
查询数据时，得到的数据是0和1，而不是true或false。

一、基本命令
	查看版本：
		select version();
	显示当前时间：
		select now();
	远程连接：   1130换成%
		1.mysql -h ip地址 -u 用户名 -p
		2.输入对方的MySQL密码
二、数据库操作
	切换数据库:
		use 数据库名;
	查看当前选择的数据库:
		select database();
三、表操作
	查看当前数据库中所有表:
		show tables;
	查看表结构：
		desc 表名；
	查看建表语句
		show create 表名；
	重命名表名：
		rename table 原表名 to 新表名；
	修改表结构：
		alert table 表名 add|change|drop 列名 类型；
四、数据操作
	1.增
		id自增用0占位。
		插入多条数据：
			insert into 表名 values(),(),... ;
	2.删
	3.改
		修改多条数据(不加where列全改)：
			update 表名 set 列1=值1,列2=值2,...;
五、查
	1.基本语法：
	2.消除重复行：
		select distinct 列名 from 表名；
	3.条件查询：
		a、语法:
		b、比较运算符: 不等于!=或<>
		c、逻辑运算符:
		d、模糊查询:
			%:多个任意字符
			_:一个任意字符
		e、范围查询:
			in 非连续范围内
			between...and... 在一个连续范围内
			实例：
				8,10,12:
					select * from 表名 where 列名 in (8，10，12);
				6-8:
				select * from 表名 where 列名 between 6 and 8;
		f、空判断:
			is null;
			is not null;
		g、优先级:
			小括号，not，比较运算符，逻辑运算符
			and>or,若想先or则结合（）使用
	4.聚合：
	5.分组：
		select 列名1,列名2,count(*) from 表名 group by 列名1，列名2；
		分组后的数据筛选：
			select 列名1,列名2,聚合... from 表名 group by 列名1，列名2...having (（列名1，列名2，聚合...）|（条件）)；
			having对结果集进行筛选.
	6.排序：
		order by 列名 asc|desc,列名 asc|desc;
	7.分页：
	select * from 表名 limit start,count;   从start开始看count条数据。
六、关联
create database qq charset=utf8;
use qq;
create table class(
	id int primary key auto_increment not null,
	name varchar(20) not null,
	stuNum int not null
);
insert into class values(0,'A0001',35);
insert into class values(0,'A0002',36);
insert into class values(0,'A0003',37);
insert into class values(0,'A0004',38);
insert into class values(0,'A0005',39);
create table student(
	id int primary key auto_increment not null,
	name varchar(20) not null,
	gender bit default 1,
	classid int not null,
	foreign key(classid) references class(id)
);
insert into student values(0,'李四',1,1);
insert into student values(0,'张三',0,2);
insert into student values(0,'王五',1,3);
insert into student values(0,'马六',0,4);
insert into student values(0,'胜七',1,5);
select * from class;
select * from student;

select student.name,class.name from class inner join student on class.id=student.classid;

select * from student inner join class on class.id=student.classid;




--alter table distribution add foreign key di_c(cid) references counter(id);
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">
	
	<!-- 实验15：通过注解分别创建Dao、Service、Controller★-->
	<!-- 通过给bean上添加某些注解，可以快速地将bean加入到ioc容器中
		某个类上添加上任何一个注解都能快速的将这个组件加入到ioc容器的管理中；
		Spring有四个注解：
		@Controller：控制器；我们推荐给控制层（servlet包下的这些）的组件加这个注释
		@Service：业务逻辑层；我们推荐给业务逻辑层的组件添加这个注解；BookService
		@Repository：给数据库层（持久化层，dao层）的组件添加这个注解
		@Component：给不属于以上几层的组件添加这个注解
		
		注解可以随便加，Spring底层不会去验证你的这个组件，
		是否如你注解所说就是一个dao层的或者就是一个servlet层的组件；
		我们推荐各自层加各自注解；给我们程序员看的；
		
		使用注解将组件快速加入到容器中需要几步：
		1）给要添加的组件上表四个注解的任何一个
		2）告诉Spring，自动扫描加了注解的组件，依赖context名称空间
		3）一定导入aop包，支持加注解模式的；
		
		平时bean中id就是类名首字母小写
	 -->
	
	<!-- 
		context:component-scan：自动扫描组件
		base-package：指定扫描的基础包；把基础包及他下面所有的包的所有加了注解的类，自动的扫描进ioc容器中
	 -->
	<!-- <context:component-scan base-package="com.atguigu"></context:component-scan> -->
	<!-- 注解和配置相结合 -->
	
	<!-- 实验17：使用context:exclude-filter指定扫描包时不包含的类 -->
	<!-- <context:component-scan base-package="com.atguigu">
		扫描的时候可以排除一些不要的组件
			type="annotation"：制定排除规则；按照注解进行排除，标注了指定注解的组件不要
				expression：注解的全类名
			type="assignable"：指定排除某个具体类，按照类排除
				expression：类的全类名
			
			type="aspectj"：后来aspectj表达式
			type="custom"：自定义一个TypeFilter;自己写代码决定那些是否使用
			type="regex"：还可以写正则表达式
		
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan> -->
	
	<!-- 实验16：使用context:include-filter指定扫描包时要包含的类
			只扫描进入哪些组件，默认都是全部扫描进来
			use-default-filters="false":禁用掉默认的过滤规则
	 -->
	<!-- <context:component-scan base-package="com.atguigu" use-default-filters="false">
		指定只扫描哪些组件
			type="annotation"：制定排除规则；按照注解进行排除，标注了指定注解的组件不要
				expression：注解的全类名
			type="assignable"：指定排除某个具体类，按照类排除
				expression：类的全类名
			
			type="aspectj"：后来aspectj表达式
			type="custom"：自定义一个TypeFilter;自己写代码决定那些是否使用
			type="regex"：还可以写正则表达式
		
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	</context:component-scan> -->
	
	<!-- DI(依赖注入) -->
	<!-- 实验18：使用@Autowired注解实现根据类型实现自动装配★ -->
	<context:component-scan base-package="com.atguigu"></context:component-scan>
	<!-- 
		@Autowired原理：
			@Autowired
			private BookService bookService;
			1）先按照类型去容器中找到对应的组件：bookService = ioc.getBean(BookService.class);
				1)找到一个，就赋值
				2）没找到，抛异常
				3）找到多个？装配上？
					1）按照变量名作为id继续匹配，BookService(bookService),BookServiceExt(bookServiceExt)
						@Autowired
						private BookService bookServiceExt2;
						1)匹配上？装配
						2）没有匹配上？报错
							原因：我们按照变量名作为id继续匹配的；
							使用@Qualifier("新名字")：指定一个名作为id，让Spring别使用变量名作为id
								1)找到？装配
								2）找不到？报错
			发现Autowired标注的自动装配的属性默认一定是装配上的；
				找到就装配，找不到就拉倒；
				@Autowired(required=false)
			
	 -->
	 
	 <!-- @Autowired,@Resource,@Inject都是自动装配的意思 
	 	@Autowired：最强大；Spring自己注解
	 	@Resource：j2ee；Java的标准
	 	@Inject：EJB
	 	
	 	@Resource：扩展性更强，因为是Java的标准；如果切换成另外一个容器框架，@Resource还是可以使用的，@Autowired就不行了
	 -->
	
	<!-- 加载外部配置文件   固定写法classpath:表示引用类路径下的一个资源-->
	<context:property-placeholder location="classpath:dbconfig.properties"/>
	
	<!-- username是Spring的key中的一个关键字(电脑的用户名)；为了防止配置文件中的key和Spring自己的关键字冲突，加个前缀什么的 -->
	<bean class="com.mchange.v2.c3p0.ComboPooledDataSource" id="dataSource">
		<property name="user" value="${jdbc.username}"></property>
		<!-- ${key}动态取出配置文件中某个key对应的值 -->
		<property name="password" value="${jdbc.password}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
	</bean>
	
	
	
	
	
</beans>

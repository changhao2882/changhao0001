<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>1.SpringMVC_helloworld</display-name>
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
  
  <!-- SpringMVC思想是有一个前端控制器能拦截所有请求，并智能派发；
  	这个前端控制器是一个servlet，应该再web.xml中配置这个servlet来拦截所有请求
   -->
   <!-- The front controller of this Spring Web application, responsible for handling all application requests -->
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		
		<!-- <init-param>
			contextConfigLocation：指定SpringMVC配置文件位置
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:springmvc.xml</param-value>
		</init-param> -->
		<!-- servlet启动加载，servlet原本是第一次访问创建对象；
			load-on-startup：服务器启动的时候创建对象；值越小，优先级越先创建对象
		 -->
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- Map all requests to the DispatcherServlet for handling -->
	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<!-- /*和/都是拦截所有请求  /：会拦截所有请求但是不会拦截*.jsp；能保证jsp访问正常
		/*的范围更大；还会拦截到*.jsp页面；一旦拦截jsp页面就不能显示
		
		处理*.jsp是Tomcat做的事；所有项目的小web.xml都是继承于大web.xml
		DefaultServlet是Tomcat中处理静态资源的？
			除过jsp,和servlet都是静态资源；
			index.xml：静态资源，tomcat就会在服务器下找到这个资源并返回
			我们前端控制器的/禁用了tomcat服务器的DefaultServlet
		
		1）服务器的web.xml中有一个DefaultServlet是url-pattern=/
		2）我们配置中前端控制器url-pattern=/
			静态资源会来到DefaultServlet（前端控制器）看哪个方法的RequestMapping是这个index.html
		3）为什么jsp又能访问；因为我们没有覆盖JspServlet的配置
		4）/*  直接就是拦截所有请求；我们写/；也是为了迎合后来Rest风格的URL地址
		 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
  
</web-app>
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!-- 扫描所有组件 -->
	<context:component-scan base-package="com.atguigu"></context:component-scan>
	
	<!--可以导入JSTL包；fmt:message；
	InternalResourceViewResolver：优先级是最低的(order=Integer.MAX_VALUE)-->
	<!-- 配置一个视图解析器；能帮我们拼接页面地址 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/pages/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- 默认前端控制器是拦截所有资源（除了jsp），js文件就404了；js文件的请求是交给tomcate处理的 -->
	<!-- 告诉SpringMVC自己映射的请求自己处理，没有映射的请求直接交给tomcate -->
	<!-- 静态资源能访问，动态映射的请求就不行了 -->
	<mvc:default-servlet-handler/>
	<!-- 其他的请求就不好使了？ -->
	<!-- 开启mvc注解驱动模式；开启了mvc的开挂模式 ;springmvc可以保证动态请求和静态请求都能访问-->
	<!-- conversion-service="conversionService"告诉springmvc使用我们自己配置的类型转换组件 -->
	<mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>
	
	<!-- ConversionServiceFactoryBean -->
	<!-- 告诉SpringMVC别用默认的ConversationService；而用我自定义的ConversationService；可能有我们自定义的Converter -->
	<!-- 以后使用自定义类型转换器的时候，就使用FormattingConversionServiceFactoryBean;既具有类型转换，还有格式化功能-->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<!-- converters转换器中添加自定义的类型转换器 -->
		<property name="converters">
			<set>
				<bean class="com.atguigu.component.MyStringToEmployeeConverter"></bean>
			</set>
		</property>
	</bean>
	
	<!--让SpringMVC管理国际化资源文件；配置一个资源文件管理器;id是必须叫messageSource  -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<!--  basename指定基础名-->
		<property name="basename" value="errors"></property>
	</bean>
	
</beans>
